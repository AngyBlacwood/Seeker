class Game {
    field int width, height;
    field Player player;
    field Array walls;
    field Array snitches;

    field int wallsCount;
    field int snitchesCount;

    field int wallGap;
    field int wallWidth;

    field int closestWallIndex;
    field int closestSnitchIndex;

    field Random random;

    constructor Game new() {
        let width = 512;
        let height = 256;
        let player = Player.new(1, height / 2);
        let wallsCount = 4;
        let snitchesCount = 4;
        let wallGap = 6;
        let wallWidth = 2;
        return this;
    }

    method void createWalls() {
        var int i;
        var int rnd;
        let walls = Array.new(wallsCount);
        while (i < wallsCount) {
            let rnd = random.generate();
            let walls[i] = (Wall.new((i + 1) * wallGap + (i * wallWidth), rnd * 2, wallWidth));
            let i = i + 1;
        }
        return;
    }

    method void createSnitches() {
        var int i;
        var int rnd;
        let snitches = Array.new(snitchesCount);
        while (i < snitchesCount) {
            let rnd = random.generate();
            let snitches[i] = (Snitch.new(i * wallGap + (wallGap / 2) + (i * wallWidth), (height / 8 * rnd)));
            let i = i + 1;
        }
        return;
    }

    method void run() {
        var boolean isFirstIteration;
        let isFirstIteration = true;

        while (true) {
            do Output.moveCursor(0, 53);
            do Output.printString("Score: 0");

            do runLoop(isFirstIteration);
            let isFirstIteration = false;

            do Output.moveCursor(11, 30);
            do Output.printString("GAME OVER");

            do Sys.wait(1000);
        }
        
        return;
    }

    method void eraseWallsAndSnitches() {
        var int i;
        var Wall wall;
        var Snitch snitch;
        while (i < wallsCount) {
            let wall = walls[i];
            let snitch = snitches[i];
            do wall.erase();
            do snitch.erase();
            let i = i + 1;
        }
        return;
    }

    method void runLoop(boolean isFirstIteration) {
        var char key;
        var int drawObjectsLag;
        var boolean exit;
        var int ticks;
        var int score;
        var Snitch closestSnitch;

        let key = Keyboard.readChar();
        do player.draw();

        if (~(isFirstIteration)) {
            do eraseWallsAndSnitches();
        }

        let random = Random.new(0, 1, 0);
        do createWalls();
        do createSnitches();
        let closestWallIndex = 0;
        let closestSnitchIndex = 0;

        while (~(exit)) {
            let key = Keyboard.keyPressed();

            let ticks = CustomMath.remainder(ticks + 1, (wallGap + wallWidth) * 20);

            if (ticks = 0) {
                let closestWallIndex = CustomMath.remainder(closestWallIndex + 1, wallsCount);
                let closestSnitchIndex = CustomMath.remainder(closestSnitchIndex + 1, wallsCount);
            }

            if (key = 131) {
                do player.erase();
                do player.moveUp();
                do player.draw();
            }
            if (key = 133) {
                do player.erase();
                do player.moveDown();
                do player.draw();
            }

            if (drawObjectsLag = 0) {
                do moveWalls();
                do moveSnitches();
                do player.draw();
            }

            if (player.collides((walls[closestWallIndex]))) {
                let exit = true;
            }

            let closestSnitch = snitches[closestSnitchIndex];
            if (player.catches(closestSnitch)) {
                do closestSnitch.wasCaught();
                let score = score + 1;
                do Output.moveCursor(0, 60);
                do Output.printInt(score);
            }

            let drawObjectsLag = CustomMath.remainder(drawObjectsLag + 1, 20);
            do Sys.wait(20);
        }
        return;
    }

    method void moveWalls() {
        var int i;
        var Wall wall;
        while (i < wallsCount) {
            let wall = walls[i];
            do wall.erase();
            do wall.moveLeft();
            do wall.draw();
            let i = i + 1;
        }
        return;
    }

    method void moveSnitches() {
        var int i;
        var Snitch snitch;
        while (i < wallsCount) {
            let snitch = snitches[i];
            do snitch.erase();
            do snitch.moveLeft();
            if (~(snitch.isCaught())){
                do snitch.draw();
            }
            let i = i + 1;
        }
        return;
    }

    method void dispose() {
        do player.dispose();
        do walls.dispose();
        do snitches.dispose();
        do Memory.deAlloc(this);
        return;
    }
}