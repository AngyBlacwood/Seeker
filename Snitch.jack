class Snitch {
    field int x;
    field int y;

    field int height;

    field boolean caught;

    constructor Snitch new(int startX, int startY) {
        let x = startX;
        let y = startY;
        let height = 9;
        let caught = false;
        return this;
    }

    method void moveLeft() {
        let x = x - 1;
        if (x < 0) {
            let x = 32 + x;
            let caught = false;
        }
        return;
    }

    method int getX() {
        return x;
    }

    method int getY() {
        return y;
    }

    method int getHeight() {
        return height;
    }

    method boolean isCaught() {
        return caught;
    }

    method void wasCaught() {
        let caught = true;
        return;
    }

    method void draw() {
        var int memAddress;
        let memAddress = 16384 + (y * 32 + x);
        do Memory.poke(memAddress+0, -4081);
        do Memory.poke(memAddress+32, -30703);
        do Memory.poke(memAddress+64, -31711);
        do Memory.poke(memAddress+96, 17346);
        do Memory.poke(memAddress+128, 15420);
        do Memory.poke(memAddress+160, 1056);
        do Memory.poke(memAddress+192, 1056);
        do Memory.poke(memAddress+224, 1056);
        do Memory.poke(memAddress+256, 960);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }

    method void erase() {
        var int memAddress;
        let memAddress = 16384 + (y * 32 + x);
        do Memory.poke(memAddress+0, 0);
        do Memory.poke(memAddress+32, 0);
        do Memory.poke(memAddress+64, 0);
        do Memory.poke(memAddress+96, 0);
        do Memory.poke(memAddress+128, 0);
        do Memory.poke(memAddress+160, 0);
        do Memory.poke(memAddress+192, 0);
        do Memory.poke(memAddress+224, 0);
        do Memory.poke(memAddress+256, 0);
        do Memory.poke(memAddress+288, 0);
        do Memory.poke(memAddress+320, 0);
        do Memory.poke(memAddress+352, 0);
        do Memory.poke(memAddress+384, 0);
        do Memory.poke(memAddress+416, 0);
        do Memory.poke(memAddress+448, 0);
        do Memory.poke(memAddress+480, 0);
        return;
    }
}