function Game.new 0
push constant 9
call Memory.alloc 1
pop pointer 0
push constant 512
pop this 0
push constant 256
pop this 1
push constant 1
push this 1
push constant 2
call Math.divide 2
call Player.new 2
pop this 2
push constant 4
pop this 5
push constant 6
pop this 6
push constant 2
pop this 7
push pointer 0
call Game.createWalls 1
pop temp 0
push pointer 0
call Game.createSnitches 1
pop temp 0
push constant 0
pop this 8
push pointer 0
return
function Game.createWalls 1
push argument 0
pop pointer 0
push this 5
call Array.new 1
pop this 3
label WHILE_EXP0
push local 0
push this 5
lt
not
if-goto WHILE_END0
push local 0
push this 3
add
push local 0
push constant 1
add
push this 6
call Math.multiply 2
push local 0
push this 7
call Math.multiply 2
add
push constant 5
push this 7
call Wall.new 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Game.createSnitches 1
push argument 0
pop pointer 0
push this 5
call Array.new 1
pop this 4
label WHILE_EXP0
push local 0
push this 5
lt
not
if-goto WHILE_END0
push local 0
push this 4
add
push local 0
push this 6
call Math.multiply 2
push this 6
push constant 2
call Math.divide 2
add
push this 1
push constant 3
call Math.divide 2
call Snitch.new 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Game.run 5
push argument 0
pop pointer 0
call Keyboard.readChar 0
pop local 0
push this 2
call Player.draw 1
pop temp 0
label WHILE_EXP0
push local 2
not
not
if-goto WHILE_END0
call Keyboard.keyPressed 0
pop local 0
push local 3
push constant 1
add
pop local 3
push local 3
push this 6
push this 7
add
eq
push constant 20
call Math.multiply 2
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 8
push constant 1
add
pop this 8
push this 8
push this 5
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
pop this 8
label IF_FALSE1
push constant 0
pop local 3
label IF_FALSE0
push local 0
push constant 131
eq
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push this 2
call Player.erase 1
pop temp 0
push this 2
call Player.moveUp 1
pop temp 0
push this 2
call Player.draw 1
pop temp 0
label IF_FALSE2
push local 0
push constant 133
eq
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push this 2
call Player.erase 1
pop temp 0
push this 2
call Player.moveDown 1
pop temp 0
push this 2
call Player.draw 1
pop temp 0
label IF_FALSE3
push local 1
push constant 0
eq
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push pointer 0
call Game.moveWalls 1
pop temp 0
push pointer 0
call Game.moveSnitches 1
pop temp 0
label IF_FALSE4
push this 2
push this 8
push this 3
add
pop pointer 1
push that 0
call Player.collides 2
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push constant 0
not
pop local 2
label IF_FALSE5
push local 1
push constant 1
add
pop local 1
push local 1
push constant 20
eq
if-goto IF_TRUE6
goto IF_FALSE6
label IF_TRUE6
push constant 0
pop local 1
label IF_FALSE6
push constant 20
call Sys.wait 1
pop temp 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Game.moveWalls 2
push argument 0
pop pointer 0
label WHILE_EXP0
push local 0
push this 5
lt
not
if-goto WHILE_END0
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 1
push local 1
call Wall.erase 1
pop temp 0
push local 1
call Wall.moveLeft 1
pop temp 0
push local 1
call Wall.draw 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Game.moveSnitches 2
push argument 0
pop pointer 0
label WHILE_EXP0
push local 0
push this 5
lt
not
if-goto WHILE_END0
push local 0
push this 4
add
pop pointer 1
push that 0
pop local 1
push local 1
call Snitch.erase 1
pop temp 0
push local 1
call Snitch.moveLeft 1
pop temp 0
push local 1
call Snitch.draw 1
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push constant 0
return
function Game.dispose 0
push argument 0
pop pointer 0
push this 2
call Player.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
