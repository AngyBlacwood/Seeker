class Game {
    field int width, height;
    field Player player;

    field Array walls;
    field Array snitches;
    field int wallsCount;

    field int wallGap;
    field int wallWidth;

    field int closestWallIndex;

    constructor Game new() {
        let width = 512;
        let height = 256;
        let player = Player.new(1, height / 2);
        let wallsCount = 4;
        let wallGap = 6;
        let wallWidth = 2;
        do createWalls();
        do createSnitches();
        let closestWallIndex = 0;
        return this;
    }

    method void createWalls() {
        var int i;
        let walls = Array.new(wallsCount);
        while (i < wallsCount) {
            let walls[i] = (Wall.new((i + 1) * wallGap + (i * wallWidth), 5, wallWidth));
            let i = i + 1;
        }
        return;
    }

    method void createSnitches() {
        var int i;
        let snitches = Array.new(wallsCount);
        while (i < wallsCount) {
            let snitches[i] = (Snitch.new(i * wallGap + (wallGap / 2), height / 3));
            let i = i + 1;
        }
        return;
    }

    method void run() {
        var char key;
        var int lag;
        var boolean exit;

        var int ticks;

        var Wall wall;

        let key = Keyboard.readChar();
        do player.draw();

        while (~(exit)) {
            let key = Keyboard.keyPressed();

            let ticks = ticks + 1;
            if (ticks = (wallGap + wallWidth) * 20) {
                let closestWallIndex = closestWallIndex + 1;
                if (closestWallIndex = wallsCount) {
                    let closestWallIndex = 0;
                }
                let ticks = 0;
            }

            if (key = 131) {
                do player.erase();
                do player.moveUp();
                do player.draw();
            }
            if (key = 133) {
                do player.erase();
                do player.moveDown();
                do player.draw();
            }

            if (lag = 0) {
                do moveWalls();
                do moveSnitches();
            }

            if (player.collides((walls[closestWallIndex]))) {
                let exit = true;
            }


            let lag = lag + 1;
            if (lag = 20) {
                let lag = 0;
            }
            do Sys.wait(20);
        }
        return;
    }

    method void moveWalls() {
        var int i;
        var Wall wall;
        while (i < wallsCount) {
            let wall = walls[i];
            do wall.erase();
            do wall.moveLeft();
            do wall.draw();
            let i = i + 1;
        }
        return;
    }

    method void moveSnitches() {
        var int i;
        var Snitch snitch;
        while (i < wallsCount) {
            let snitch = snitches[i];
            do snitch.erase();
            do snitch.moveLeft();
            do snitch.draw();
            let i = i + 1;
        }
        return;
    }

    method void dispose() {
        do player.dispose();
        do Memory.deAlloc(this);
        return;
    }
}